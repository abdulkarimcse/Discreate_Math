#include <stdio.h>
#include <stdlib.h>
struct Edge {
    int src, dest, weight;
};


struct DisjointSet {
    int *parent, *rank;
    int n;
};


struct DisjointSet* createDisjointSet(int n) {
    struct DisjointSet* ds = (struct DisjointSet*)malloc(sizeof(struct DisjointSet));
    ds->n = n;
    ds->parent = (int*)malloc(n * sizeof(int));
    ds->rank = (int*)malloc(n * sizeof(int));

    for (int i = 0; i < n; i++) {
        ds->parent[i] = i;
        ds->rank[i] = 0;
    }

    return ds;
}


int find(struct DisjointSet* ds, int i) {
    if (ds->parent[i] != i)
        ds->parent[i] = find(ds, ds->parent[i]);
    return ds->parent[i];
}


void unionSets(struct DisjointSet* ds, int x, int y) {
    int rootX = find(ds, x);
    int rootY = find(ds, y);

    if (rootX != rootY) {
        if (ds->rank[rootX] < ds->rank[rootY])
            ds->parent[rootX] = rootY;
        else if (ds->rank[rootX] > ds->rank[rootY])
            ds->parent[rootY] = rootX;
        else {
            ds->parent[rootY] = rootX;
            ds->rank[rootX]++;
        }
    }
}


int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}


void kruskalMST(struct Edge* edges, int V, int E) {

    qsort(edges, E, sizeof(struct Edge), compareEdges);

    struct DisjointSet* ds = createDisjointSet(V);
    struct Edge result[V - 1];
    int mstWeight = 0;
    int i = 0;
    int e = 0;

    while (e < V - 1 && i < E) {
        struct Edge nextEdge = edges[i++];

        int x = find(ds, nextEdge.src);
        int y = find(ds, nextEdge.dest);

        if (x != y) {
            result[e++] = nextEdge;
            unionSets(ds, x, y);
            mstWeight += nextEdge.weight;
        }
    }

    printf("Edges in the Minimum Spanning Tree:\n");
    for (i = 0; i < e; i++) {
        printf("%d - %d with weight %d\n", result[i].src, result[i].dest, result[i].weight);
    }

    printf("Total weight of Minimum Spanning Tree: %d\n", mstWeight);

    free(ds->parent);
    free(ds->rank);
    free(ds);
}

int main() {
    int V = 4;
    int E = 5;

    struct Edge edges[] = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    kruskalMST(edges, V, E);

    return 0;
}
